AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  commute-route-sam: AWS Lambda non-proxy integrations
  Commute Route SAM Template for commute-route-service deployment

Globals: 
  Function:
    Runtime: nodejs14.x
    Timeout: 5

Parameters: 
  StageParam: 
    Type: String
    AllowedValues:
      - dev
      - stg
      - prod
    Default: dev

Mappings: 
  StageMap: 
    dev:
      EnvTraceUrl: http://tn-driver-profile.stg.k8s.mypna.com
      EnvMatchingUrl: http://osrm-api-ranking-unidb-na.stg.k8s.mypna.com
      EnvTrackingUrl: http://sync4routing-na.stg.k8s.mypna.com
      EnvRoutingUrl: http://sync4routing-na.stg.k8s.mypna.com
      GatewayName: CommuteRouteAPI-dev
      ServiceName: CommuteRouteService-dev
      LambdaRole: arn:aws:iam::269547223311:role/dpcs-dev-lambda-role  
      VpcEndpointId: vpce-024d8b35e5234fe05
      SecurityGroupId: sg-7ebb4e1b
      SubnetId1: subnet-090ca134d0bdee732
      SubnetId2: subnet-028e48bd280e91c09
      PipelineRole: arn:aws:iam::269547223311:role/CodePipeline
    stg:
      EnvTraceUrl: http://tn-driver-profile.stg.k8s.mypna.com
      EnvMatchingUrl: http://osrm-api-ranking-unidb-na.stg.k8s.mypna.com
      EnvTrackingUrl: http://sync4routing-na.stg.k8s.mypna.com
      EnvRoutingUrl: http://sync4routing-na.stg.k8s.mypna.com
      GatewayName: CommuteRouteAPI-stg
      ServiceName: CommuteRouteService-stg
      LambdaRole: arn:aws:iam::269547223311:role/dpcs-dev-lambda-role
      VpcEndpointId: vpce-024d8b35e5234fe05
      SecurityGroupId: sg-7ebb4e1b
      SubnetId1: subnet-090ca134d0bdee732
      SubnetId2: subnet-028e48bd280e91c09
      PipelineRole: arn:aws:iam::269547223311:role/CodePipeline
    prod:
      EnvTraceUrl: http://tn-driver-profile.k8s.mypna.com
      EnvMatchingUrl: http://osrm-api-ranking-unidb-na.k8s.mypna.com
      EnvTrackingUrl: http://sync4routing-na.k8s.mypna.com
      EnvRoutingUrl: http://sync4routing-na.k8s.mypna.com
      GatewayName: CommuteRouteAPI
      ServiceName: CommuteRouteService
      LambdaRole: arn:aws:iam::269547223311:role/dpcs-dev-lambda-role
      VpcEndpointId: vpce-024d8b35e5234fe05
      SecurityGroupId: sg-7ebb4e1b
      SubnetId1: subnet-090ca134d0bdee732
      SubnetId2: subnet-028e48bd280e91c09
      PipelineRole: arn:aws:iam::269547223311:role/CodePipeline

Resources:
  CommuteRouteService: 
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ../
      Handler: dist/index.handler
      FunctionName: !FindInMap [StageMap, !Ref StageParam, ServiceName] 
      Environment:
        Variables:
          PROXY_INTEGRATION: false
          TRACE_URL: !FindInMap [StageMap, !Ref StageParam, EnvTraceUrl] 
          MATCHING_URL: !FindInMap [StageMap, !Ref StageParam, EnvMatchingUrl] 
          TRACKING_URL: !FindInMap [StageMap, !Ref StageParam, EnvTrackingUrl] 
          ROUTING_URL: !FindInMap [StageMap, !Ref StageParam, EnvRoutingUrl] 
      Role: !FindInMap [StageMap, !Ref StageParam, LambdaRole] 
      VpcConfig:
        SecurityGroupIds: 
          - !FindInMap [StageMap, !Ref StageParam, SecurityGroupId] 
        SubnetIds: 
          - !FindInMap [StageMap, !Ref StageParam, SubnetId1] 
          - !FindInMap [StageMap, !Ref StageParam, SubnetId2] 
      AutoPublishAlias: Current
      DeploymentPreference:
        Type: AllAtOnce # Canary10Percent5Minutes, Linear10PercentEvery1Minute, AllAtOnce
        Role: !FindInMap [StageMap, !Ref StageParam, PipelineRole]

  CommuteRouteApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !FindInMap [StageMap, !Ref StageParam, GatewayName] 
      EndpointConfiguration: 
        Type: PRIVATE 
        VPCEndpointIds: 
          - !FindInMap [StageMap, !Ref StageParam, VpcEndpointId] 
      StageName: !Ref StageParam

      DefinitionBody:
        openapi: 3.0.1 
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action:
                - "execute-api:Invoke"
              Resource: "execute-api:/*/*/*"
        
        paths:
          /v0/json:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v0/json\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
          /v1/json:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v1/json\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
          /v1/jsons:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v1/jsons\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
          /v1/flatbuffers:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v1/flatbuffers\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/octet-stream'"
                    contentHandling: CONVERT_TO_BINARY
          /versions:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/versions\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\"\n\
                    \ }"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
  
  CommuteRouteServiceCatchAllPermissionCommuteRouteApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CommuteRouteServiceAliasCurrent
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CommuteRouteApi}/*/*
      Principal: apigateway.amazonaws.com
      Action: lambda:invokeFunction

Outputs:
  CommuteRouteService:
    Description: "Lambda Function ARN in format 'arn:aws:lambda:{region}:{account-id}:function:{function-name}'"
    Value: !GetAtt CommuteRouteService.Arn
  CommuteRouteApi:
    Description: "Private REST API URL in format 'https://{rest-api-id}-{vpce-id}.execute-api.{region}.amazonaws.com/{stage}' "
    Value: !Sub 
      - "https://${CommuteRouteApi}-${VpcEndpointId}.execute-api.${AWS::Region}.amazonaws.com/${StageParam}/"
      - { VpcEndpointId: !FindInMap [StageMap, !Ref StageParam, VpcEndpointId]  }