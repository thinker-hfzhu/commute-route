AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  commute-route-sam: AWS Lambda non-proxy integrations
  Commute Route SAM Template for commute-route-service deployment

Globals: 
  Function:
    Runtime: nodejs14.x
    Timeout: 5

Parameters: 
  EnvName: 
    Type: String
    AllowedValues:
      - dev
      - stg
      - prod
    Default: dev
  
  TraceUrl: 
    Type: String
  MatchingUrl: 
    Type: String
  TrackingUrl: 
    Type: String
  RoutingUrl: 
    Type: String
  
  VpcEndpointId: 
    Type: String
  SecurityGroupId: 
    Type: String
  SubnetId1: 
    Type: String
  SubnetId2: 
    Type: String
  
  LambdaRole: 
    Type: String
  PipelineRole: 
      Type: String

Resources:
  CommuteRouteService: 
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ../
      Handler: dist/index.handler
      FunctionName: !Sub "CommuteRouteService-${EnvName}" 
      Environment:
        Variables:
          PROXY_INTEGRATION: false
          TRACE_URL: !Ref TraceUrl
          MATCHING_URL: !Ref MatchingUrl 
          TRACKING_URL: !Ref TrackingUrl 
          ROUTING_URL: !Ref RoutingUrl
      Role: !Ref LambdaRole
      
      VpcConfig:
        SecurityGroupIds: 
          - !Ref SecurityGroupId  
        SubnetIds: 
          - !Ref SubnetId1 
          - !Ref SubnetId2 
      
      AutoPublishAlias: Current
      DeploymentPreference:
        Type: AllAtOnce # Canary10Percent5Minutes, Linear10PercentEvery1Minute, AllAtOnce
        Role: !Ref PipelineRole 
      
  CommuteRouteApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "CommuteRouteAPI-${EnvName}"  
      EndpointConfiguration: 
        Type: PRIVATE # PRIVATE, REGIONAL
        VPCEndpointIds: 
          - !Ref VpcEndpointId 
      StageName: !Ref EnvName

      DefinitionBody:
        openapi: 3.0.1 
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action:
                - "execute-api:Invoke"
              Resource: "execute-api:/*/*/*"
        
        paths:
          /v0/json:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v0/json\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
          /v1/json:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v1/json\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
          /v1/jsons:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v1/jsons\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
          /v1/flatbuffers:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/v1/flatbuffers\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\",\n\
                    \  \"queryStringParameters\": {\n\
                          #foreach($param in $input.params().querystring.keySet())\n\
                    \    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"#if($foreach.hasNext),#end\n\n\
                          #end\n\
                    \  }\n}"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/octet-stream'"
                    contentHandling: CONVERT_TO_BINARY
          /versions:
            get:
              responses: 
                '200':
                  headers:
                    Content-Type:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommuteRouteServiceAliasCurrent}/invocations
                requestTemplates:
                  application/json: "{\n\
                    \  \"resource\": \"/versions\",\n\
                    \  \"httpMethod\": \"$context.httpMethod\"\n\
                    \ }"
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Content-Type: "'application/json'"
  
  CommuteRouteServiceCatchAllPermissionCommuteRouteApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CommuteRouteServiceAliasCurrent
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CommuteRouteApi}/*/*
      Principal: apigateway.amazonaws.com
      Action: lambda:invokeFunction

Outputs:
  CommuteRouteService:
    Description: "Lambda Function ARN in format 'arn:aws:lambda:{region}:{account-id}:function:{function-name}'"
    Value: !GetAtt CommuteRouteService.Arn
  CommuteRouteApi:
    Description: "Private REST API URL in format 'https://{rest-api-id}-{vpce-id}.execute-api.{region}.amazonaws.com/{env}' "
    Value: !Sub 
      - "https://${CommuteRouteApi}-${VpcEndpointId}.execute-api.${AWS::Region}.amazonaws.com/${EnvName}/"
      - { VpcEndpointId: !Ref VpcEndpointId}
      